type Execution
  @model(subscriptions: { level: public })
  @auth(rules: [
    { allow: owner, ownerField: "owner", provider: userPools, identityClaim: "email", operations: [create, update, read, delete] }
    { allow: owner, ownerField: "collaborators", provider: userPools, identityClaim: "email", operations: [update, read] }
    { allow: groups, groupsField: "groups", operations: [update, read] }
    { allow: private, provider: iam }
  ])
{
  id: ID!
  owner: String!
  collaborators: [String]
  groups: [String]
  description: String
  tags: [String]
  status: String
  src_url: String
  recordingEnabled: Boolean
  recordingFileUri: AWSURL
  transcriptionEnabled: Boolean
  transcriptionLanguageCode: String
  transcriptionMaxSpeakerLabels: Int
  transcriptionStatus: String
  transcriptionMediaFileUri: AWSURL
  transcriptFileUri: AWSURL
  broadcastEnabled: Boolean
  broadcastRtmpUri: String
}

type TranscriptSpeakerLabel @model
  @auth(rules: [ { allow: private, provider: userPools } ])
{
  id: ID!
  spk_0: String
  spk_1: String
  spk_2: String
  spk_3: String
  spk_4: String
  spk_5: String
  spk_6: String
  spk_7: String
  spk_8: String
  spk_9: String
}

type AccountSettings @model
  @auth(rules: [ { allow: owner, ownerField: "id", provider: userPools, identityClaim: "sub", operations: [create, read, update, delete] } ])
{
  id: ID!
  defaultTranscriptionLanguageCode: String
  twitch_stream_key: String
  youtube_stream_key: String
}

#type VocabularySheet @model
#  @auth(rules: [ { allow: private, provider: userPools } ])
#  @key(fields: [ "vocabularyId", "row" ])
#{
#  vocabularyId: ID!
#  row: Int!
#  phrase: String!
#  ipa: String
#  soundsLike: String
#  displayAs: String
#}
#
#type Vocabulary @model
#  @auth(rules: [
#    { allow: private, provider: userPools }
#    { allow: private, provider: iam }
#  ])
#{
#  id: ID!
#  name: String!
#  status: String
#  fileUri: AWSURL
#}
